class Fen2D():
    def lsb(self, n):
        return n & (-n)

    def updateBits(self, i,j, v):
        m,n = self.m, self.n

        delta = v - self.grid[i][j]
        self.grid[i][j] = v

        oi, oj = i, j
        while i <= m:
            j = oj
            while j <= n:
                self.bits[i][j]+=delta
                j+=self.lsb(j)
            i+=self.lsb(i)
    
    def query(self, i, j):

        oj = j
        ssum = 0
        while i > 0:
            j = oj
            while j > 0:
                ssum+=self.bits[i][j]
                j-=self.lsb(j)
            i-=self.lsb(i)
        return ssum
            

    def __init__(self, grid: List[List[int]]):
        self.m, self.n = len(grid), len(grid[0])
        m,n = self.m, self.n
        self.grid = [[0 for _ in range(n+1)] for _ in range(m+1)]
        self.bits = [[0 for _ in range(n+1)] for _ in range(m+1)]

        for i in range(1,m+1):
            for j in range(1,n+1):
                v = grid[i-1][j-1]
                self.updateBits(i,j, v)

        
'''
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        #row1,col1. A      row1,col2 B


        #row2,col1 C       row2,col2 D
        A = self.fen.query(row1, col1)
        B = self.fen.query(row1, col2+1)
        C = self.fen.query(row2+1, col1)
        D = self.fen.query(row2+1, col2+1)

        return D + A - C - B
'''
